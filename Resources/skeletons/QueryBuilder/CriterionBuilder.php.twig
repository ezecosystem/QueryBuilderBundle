<?php
namespace eZ\Publish\Core\Repository\QueryBuilder\Builder;

use eZ\Publish\API\Repository\GeneratedQueryBuilder;
use eZ\Publish\API\Repository\QueryBuilder\Builder\GeneratedCriterionBuilder as CriterionBuilderInterface;
use eZ\Publish\API\Repository\Values\Content\Query\Criterion;
use eZ\Publish\Core\Repository\QueryBuilder\BaseCriterionBuilder;
use eZ\Publish\Core\Repository\QueryBuilder\CriterionFactoryWorkerRegistry;

/**
 * @method \eZ\Publish\API\Repository\GeneratedQueryBuilder or(\eZ\Publish\API\Repository\QueryBuilder\Builder\GeneratedCriterionBuilder $criterionBuilder) Start a LogicalOr criterion.
 * @method \eZ\Publish\API\Repository\GeneratedQueryBuilder and(\eZ\Publish\API\Repository\QueryBuilder\Builder\GeneratedCriterionBuilder $criterionBuilder) Start a LogicalAnd criterion.
 */
class GeneratedCriterionBuilder extends BaseCriterionBuilder implements CriterionBuilderInterface
{
    public function __construct( CriterionFactoryWorkerRegistry $criterionFactoryWorkerRegistry, QueryBuilder $parentBuilder = null)
    {
        parent::__construct( $criterionFactoryWorkerRegistry );
        $this->parentBuilder = $parentBuilder;
    }

    /**
    * Returns the builder that must be injected the product of the factories.
    *
    * Returns $this by default.
    *
    * @return \eZ\Publish\API\Repository\QueryBuilder\Builder\CriterionBuilder
    */
    protected function getFactoryBuilder()
    {
        return $this->parentBuilder ?: $this;
    }

{% for criterion in criterion_list %}
    public function {{ criterion.id }}()
    {
        return $this->startCriterionFactoryWork(
            '{{ criterion.worker_type }}', '{{ criterion.class }}'
        );
    }

{% endfor %}
{% for fieldtype in fieldtype_list%}
    public function {{ fieldtype.id }}Field( $fieldIdentifier )
    {
        return $this->startFieldCriterionFactoryWork( '{{ fieldtype.id }}', $fieldIdentifier );
    }

{% endfor %}
}
